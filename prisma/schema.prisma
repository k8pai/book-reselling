// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  accountType   String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  books         Books[]
  cart          Cart[]

  @@map("users")
}

model Books {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  image         String?
  contact       String
  author        String
  emailVerified DateTime?
  theme         String
  tone          String
  genre         String
  audience      String
  price         Int
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites     Cart[]

  @@map("books")
}

model Cart {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookId String @db.ObjectId
  book   Books  @relation(fields: [bookId], references: [id], onDelete: Cascade)

  // Add a unique constraint on userId and bookId
  @@unique([userId, bookId])
  @@map("favorites")
}
